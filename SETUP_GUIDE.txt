===============================================================================
MULTINAV iCRM - COMPLETE SETUP GUIDE
===============================================================================

This guide will help you set up the MultiNav iCRM system with Supabase backend
and deploy it to a custom domain.

===============================================================================
PART 1: SUPABASE SETUP
===============================================================================

1. CREATE SUPABASE ACCOUNT & PROJECT
   - Go to https://supabase.com
   - Sign up for a free account
   - Create a new project
   - Choose a region close to Perth, Australia (e.g., Sydney)
   - Note down your project URL and anon key

2. SET UP DATABASE SCHEMA
   - In Supabase dashboard, go to SQL Editor
   - Copy the entire contents of /supabase/schema.sql
   - Paste and run the SQL script
   - This will create all necessary tables and policies

3. CONFIGURE AUTHENTICATION (Optional but recommended)
   - Go to Authentication > Policies
   - Update the RLS policies for production use
   - Consider enabling email authentication for staff users

===============================================================================
PART 2: LOCAL DEVELOPMENT SETUP
===============================================================================

1. INSTALL DEPENDENCIES
   - Install Node.js (v16 or higher): https://nodejs.org
   - Open terminal in project directory
   - Run: npm install

2. CONFIGURE ENVIRONMENT VARIABLES
   - Copy env.example to .env.local
   - Update with your Supabase credentials:
     VITE_SUPABASE_URL=your_project_url_here
     VITE_SUPABASE_ANON_KEY=your_anon_key_here
     VITE_GEMINI_API_KEY=your_gemini_api_key_here

3. GET GEMINI API KEY
   - Go to https://makersuite.google.com/app/apikey
   - Create a new API key
   - Add it to your .env.local file

4. RUN DEVELOPMENT SERVER
   - Run: npm run dev
   - Open http://localhost:5173 in your browser
   - Test the application locally

===============================================================================
PART 3: PRODUCTION DEPLOYMENT
===============================================================================

OPTION A: DEPLOY TO VERCEL (Recommended)
-----------------------------------------
1. Push code to GitHub repository
2. Go to https://vercel.com
3. Import your GitHub repository
4. Configure environment variables in Vercel:
   - Add all variables from .env.local
5. Deploy (automatic)
6. Your app will be available at: your-project.vercel.app

OPTION B: DEPLOY TO NETLIFY
----------------------------
1. Build the project: npm run build
2. Go to https://netlify.com
3. Drag and drop the 'dist' folder
4. Configure environment variables in Netlify settings
5. Your app will be available at: your-project.netlify.app

OPTION C: DEPLOY TO CUSTOM VPS
-------------------------------
1. Build the project: npm run build
2. Upload 'dist' folder to your server
3. Configure Nginx/Apache to serve the static files
4. Set up SSL certificate (Let's Encrypt recommended)

===============================================================================
PART 4: CUSTOM DOMAIN SETUP
===============================================================================

1. PURCHASE DOMAIN
   - Recommended registrars: Namecheap, Google Domains, Cloudflare
   - Example: multinav-health.com.au

2. CONFIGURE DNS (for Vercel/Netlify)
   - Add CNAME record pointing to your deployment URL
   - Or use A records with platform-provided IPs
   - Wait for DNS propagation (5-30 minutes)

3. CONFIGURE SSL
   - Vercel/Netlify: Automatic SSL
   - Custom VPS: Use Let's Encrypt with Certbot

===============================================================================
PART 5: DATA MIGRATION
===============================================================================

1. EXPORT EXISTING DATA (if any)
   - Use Supabase dashboard to export CSV files
   - Or use pg_dump for PostgreSQL backup

2. IMPORT MOCK DATA
   - The application includes an initializeDatabase() function
   - This will populate initial mock data
   - Call this function once after deployment

3. PRODUCTION DATA
   - Remove mock data before going live
   - Import real client data via Supabase dashboard
   - Or use the application's UI to add data

===============================================================================
PART 6: TESTING CHECKLIST
===============================================================================

Before going live, test these features:

STAFF PORTAL:
□ Login as staff (admin@multinav.com / password123)
□ Add/edit/delete clients
□ Create health navigation activities
□ Generate AI insights
□ Export reports to PDF
□ Check unified reporting with date filters
□ Add/manage workforce data
□ Search and add GP practices
□ Upload program resources

PATIENT PORTAL:
□ Login as patient (use mock client credentials)
□ Submit health experiences
□ Send messages to navigator
□ Test language translation
□ Upload attachments

GENERAL:
□ Dark mode toggle
□ Mobile responsiveness
□ Data persistence across sessions
□ Error handling for network issues

===============================================================================
PART 7: SECURITY CONSIDERATIONS
===============================================================================

BEFORE PRODUCTION:
1. Change default staff credentials
2. Implement proper password hashing (bcrypt)
3. Enable Supabase RLS (Row Level Security) policies
4. Set up proper CORS policies
5. Implement rate limiting
6. Regular database backups
7. Monitor API usage and costs
8. Set up error logging (Sentry recommended)

===============================================================================
PART 8: MAINTENANCE
===============================================================================

REGULAR TASKS:
- Weekly database backups
- Monitor Supabase usage (free tier limits)
- Monitor Gemini API usage
- Update dependencies monthly
- Review error logs
- User feedback collection

SCALING CONSIDERATIONS:
- Supabase free tier: 500MB database, 1GB storage
- Upgrade to Pro plan for production use
- Consider caching for frequently accessed data
- Implement pagination for large datasets

===============================================================================
SUPPORT & TROUBLESHOOTING
===============================================================================

COMMON ISSUES:

1. "Supabase connection failed"
   - Check VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY
   - Ensure Supabase project is active
   - Check network connectivity

2. "AI features not working"
   - Verify VITE_GEMINI_API_KEY is set
   - Check API quota limits
   - Ensure API key has necessary permissions

3. "Data not persisting"
   - Check Supabase RLS policies
   - Verify table permissions
   - Check browser console for errors

4. "Build errors"
   - Run: npm install
   - Clear node_modules and reinstall
   - Check Node.js version (v16+)

===============================================================================
ESTIMATED COSTS
===============================================================================

MONTHLY COSTS (PRODUCTION):
- Domain: ~$2-3/month
- Supabase Pro: $25/month (optional, free tier available)
- Vercel/Netlify: Free tier usually sufficient
- Gemini API: Pay-per-use, ~$5-20/month depending on usage

TOTAL: ~$30-50/month for production deployment

===============================================================================
CONTACT & UPDATES
===============================================================================

For questions or issues:
- Review the README.md file
- Check Supabase documentation: https://supabase.com/docs
- Check Vercel documentation: https://vercel.com/docs

Last updated: October 2024
Version: 1.0.0
===============================================================================






